<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.kakusei.fams.mapper.IEmployeeMapper">
    <resultMap id="EmployeeMap" type="xyz.kakusei.fams.entity.Employee">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="birthday" column="birthday" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="address" column="address" />
        <result property="password" column="password" />
        <result property="admin" column="admin" />
        <result property="hireDate" column="hiredate" />
        <association property="gender" columnPrefix="g_" javaType="xyz.kakusei.fams.entity.Gender">
            <id property="id" column="id" />
            <result property="name" column="name" />
        </association>
        <association property="department" columnPrefix="d_" javaType="xyz.kakusei.fams.entity.Department">
            <id property="id" column="id"/>
            <result property="name" column="name" />
            <result property="contact" column="contact" />
            <result property="comments" column="comments" />
        </association>
        <association property="employeeState" columnPrefix="es_" javaType="xyz.kakusei.fams.entity.State">
            <id property="id" column="id" />
            <result property="name" column="name" />
        </association>
        <collection property="roleList" ofType="xyz.kakusei.fams.entity.Role" select="xyz.kakusei.fams.mapper.IRoleMapper.queryRoleByEmployeeId" column="id" columnPrefix="emp_"/>
    </resultMap>
    <select id="queryAll" resultMap="EmployeeMap" >
        SELECT e.id, e.name, e.birthday, g.id AS g_id, g.name AS g_name, e.phone, e.email, e.password, e.address, e.admin, e.hiredate,
               d.id AS d_id, d.name AS d_name, d.contact AS d_contact, d.comments AS d_comments,
               es.id AS es_id, es.name AS es_name
        FROM employees AS e LEFT JOIN departments AS d ON(e.dept_id = d.id)
            LEFT JOIN employee_states AS es ON (e.state_id = es.id)
            LEFT JOIN gender AS g ON(e.gender = g.id)
    </select>
    <select id="queryById" parameterType="Long" resultMap="EmployeeMap">
        SELECT e.id, e.name, e.birthday, g.id AS g_id, g.name AS g_name, e.phone, e.email, e.password, e.address, e.admin, e.hiredate,
               d.id AS d_id, d.name AS d_name, d.contact AS d_contact, d.comments AS d_comments,
               es.id AS es_id, es.name AS es_name
        FROM employees AS e LEFT JOIN departments AS d ON(e.dept_id = d.id)
                            LEFT JOIN employee_states AS es ON (e.state_id = es.id)
                            LEFT JOIN gender AS g ON(e.gender = g.id)
        WHERE e.id = #{id}
    </select>
    <select id="queryByCriteria" parameterType="xyz.kakusei.fams.query.EmployeeQueryObject" resultMap="EmployeeMap">
        SELECT e.id, e.name, e.birthday, g.id AS g_id, g.name AS g_name, e.phone, e.email, e.password, e.address, e.admin, e.hiredate,
               d.id AS d_id, d.name AS d_name, d.contact AS d_contact, d.comments AS d_comments,
               es.id AS es_id, es.name AS es_name
        FROM employees AS e LEFT JOIN departments AS d ON(e.dept_id = d.id)
                            LEFT JOIN employee_states AS es ON (e.state_id = es.id)
                            LEFT JOIN gender AS g ON(e.gender = g.id)
        <where>
            1 = 1
            <if test="keyword != null and keyword != ''">
                AND
                (
                e.name LIKE CONCAT('%',#{keyword},'%')
                OR e.phone LIKE CONCAT('%',#{keyword},'%')
                OR e.email LIKE CONCAT('%',#{keyword},'%')
                )
            </if>
            <if test="department != null and department > 0">
                AND d.id = #{department}
            </if>
            <if test="employeeState != null and employeeState > 0">
                AND es.id = #{employeeState}
            </if>
            <if test="gender != null and gender > 0">
                AND g.id = #{gender}
            </if>
        </where>
    </select>
    <select id="queryByUsernameAndPassword" resultMap="EmployeeMap">
        SELECT e.id, e.name, e.birthday, g.id AS g_id, g.name AS g_name, e.phone, e.email, e.password, e.address, e.admin, e.hiredate,
               d.id AS d_id, d.name AS d_name, d.contact AS d_contact, d.comments AS d_comments,
               es.id AS es_id, es.name AS es_name
        FROM employees AS e LEFT JOIN departments AS d ON(e.dept_id = d.id)
                            LEFT JOIN employee_states AS es ON (e.state_id = es.id)
                            LEFT JOIN gender AS g ON(e.gender = g.id)
        WHERE
              ( e.id = #{username} OR e.name = #{username} OR e.phone = #{username} OR e.email = #{username} ) AND password = #{password}
    </select>
    <insert id="insert" parameterType="xyz.kakusei.fams.entity.Employee" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO employees(name, birthday, gender, phone, email, password, address, admin, hiredate, dept_id, state_id)
            VALUES(#{name}, #{birthday}, #{gender.id}, #{phone}, #{email}, #{password}, #{address}, #{admin}, #{hireDate}, #{department.id}, #{employeeState.id})
    </insert>
    <update id="update" parameterType="xyz.kakusei.fams.entity.Employee">
        UPDATE employees SET name = #{name}, birthday = #{birthday}, gender = #{gender.id},
                             phone = #{phone}, email = #{email},  password = #{password}, address = #{address},
                             admin = #{admin}, hiredate = #{hireDate}, dept_id = #{department.id}, state_id = #{employeeState.id}
            WHERE id = #{id}
    </update>
    <delete id="deleteById" parameterType="Long">
        DELETE FROM employees WHERE id = #{id}
    </delete>
</mapper>